var searchIndex = JSON.parse('{\
"minecraft_server_query":{"doc":"Implementation of the Minecraft server Query UDP protocol","t":[12,3,17,17,3,3,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,11,11,11,12,12,0,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,3,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["0","BasicStat","DEFAULT_PORT","DEFAULT_TIMEOUT","FullStat","Token","async_std","blocking","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_payload","from_payload","from_payload","game_id","gametype","gametype","hostip","hostip","hostname","hostport","hostport","into","into","into","map","map","maxplayers","maxplayers","motd","ne","ne","ne","numplayers","numplayers","packets","player_list","plugins","to_owned","to_owned","to_owned","tokio","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","QueryClient","basic_stat","borrow","borrow_mut","fmt","from","full_stat","handshake","into","new","new_with_port","new_with_socket_address","query","recv","try_from","try_into","type_id","QueryClient","basic_stat","borrow","borrow_mut","fmt","from","full_stat","handshake","into","new","new_with_port","new_with_socket_address","query","try_from","try_into","type_id","BasicStat","FullStat","Handshake","Handshake","PacketType","Stat","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","ne","ne","new","new","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","QueryClient","basic_stat","borrow","borrow_mut","fmt","from","full_stat","handshake","into","new","new_with_port","new_with_socket_address","query","recv","try_from","try_into","type_id"],"q":["minecraft_server_query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minecraft_server_query::async_std","","","","","","","","","","","","","","","","","minecraft_server_query::blocking","","","","","","","","","","","","","","","","minecraft_server_query::packets","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minecraft_server_query::tokio","","","","","","","","","","","","","","","",""],"d":["","Basic status information on a minecraft server","Default port for a Minecraft server.","Default timeout for the UDP sockets in <code>QueryClient</code>","Full status information for a minecraft server","A Query token, returned by a UDP handshake","<code>async-std</code> implementation of the Query protocol.","Blocking implementation of the Query protocol.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse a token from a UDP payload, discarding the …","Parse a basic stat struct from a UDP payload. Fails if …","Parse a full stat struct from a UDP payload. Fails if …","Game ID, hardcoded to <code>&quot;MINECRAFT&quot;</code>","The server’s gametype, hardcoded to <code>&quot;SMP&quot;</code>","Game type, hardcoded to <code>&quot;SMP&quot;</code>","IP that the server may receive connections on","IP that the server may receive connections on","Server MoTD as displayed in the in-game server browser","Port the server is listening on","Port the server is listening on","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Name of the default world","Name of the default world","Maximum number of players this server supports","Maximum number of players this server supports","Server MoTD as displayed in the in-game server browser","","","","How many players are currently online","How many players are currently online","Raw bytes packets used by the Query protocol","Names of the players currently online","Server plugins. Format varies with server framework","","","","<code>tokio</code> implementation of the Query protocol.","","","","","","","","","","Game version (<code>&quot;1.7.10&quot;</code>, <code>&quot;1.16.2&quot;</code>…)","An asynchronous Query client using the <code>async-std</code> …","Request and wait for a basic status packet on the client …","","","","Returns the argument unchanged.","Request and wait for a full status packet on the client …","Send a UDP handshake packet to the client socket.","Calls <code>U::from(self)</code>.","Build a new QueryClient from the given IP address.","Build a new QueryClient from the given IP address and port.","Builds a new QueryClient from the given IP address, port, …","Convenience function to get a full status packet on the …","Receive a UDP packet from the client socket.","","","","A blocking Query client using the <code>std</code> networking …","Request and wait for a basic status packet on the client …","","","","Returns the argument unchanged.","Request and wait for a full status packet on the client …","Send a UDP handshake packet to the client socket.","Calls <code>U::from(self)</code>.","Build a new QueryClient from the given IP address.","Build a new QueryClient from the given IP address and port.","Builds a new QueryClient from the given IP address, port, …","Convenience function to get a full status packet on the …","","","","Basic status request packet, 11 bytes long","Full status request packet, 15 bytes long","Handshake request packet, 7 bytes long","Type of a handshake packet","Single byte constants representing the type of a packet","Type of a status packet","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Build a new handshake request packet from the given …","Build a new basic status request packet from the given …","Build a new full status request packet from the given …","","","","","","","","","","","","","","","","","An asynchronous Query client using the <code>tokio</code> networking …","Request and wait for a basic status packet on the client …","","","","Returns the argument unchanged.","Request and wait for a full status packet on the client …","Send a UDP handshake packet to the client socket.","Calls <code>U::from(self)</code>.","Build a new QueryClient from the given IP address.","Build a new QueryClient from the given IP address and port.","Builds a new QueryClient from the given IP address, port, …","Convenience function to get a full status packet on the …","Receive a UDP packet from the client socket.","","",""],"i":[1,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,3,2,3,2,3,3,2,3,1,2,3,2,3,2,3,2,1,2,3,2,3,0,3,3,1,2,3,0,1,2,3,1,2,3,1,2,3,3,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,0,0,0,6,0,6,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,7,8,9,6,7,8,6,7,8,9,6,7,8,9,6,7,8,9,7,8,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,0,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",3]],[[["",0]],["basicstat",3]],[[["",0]],["fullstat",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["token",3]],["bool",0]],[[["",0],["basicstat",3]],["bool",0]],[[["",0],["fullstat",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,[[["",0],["token",3]],["bool",0]],[[["",0],["basicstat",3]],["bool",0]],[[["",0],["fullstat",3]],["bool",0]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0],["token",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["token",3]]],[[["",0]]],[[]],[[["str",0]]],[[["str",0],["u16",0]]],[[["str",0],["u16",0],["option",4,[["duration",3]]]]],[[["str",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["token",3]],["result",6,[["basicstat",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["token",3]],["result",6,[["fullstat",3]]]],[[["",0]],["result",6,[["token",3]]]],[[]],[[["str",0]],["result",6]],[[["str",0],["u16",0]],["result",6]],[[["str",0],["u16",0],["option",4,[["duration",3]]]],["result",6]],[[["str",0]],["result",6,[["fullstat",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["packettype",4]],[[["",0]],["handshake",3]],[[["",0]],["basicstat",3]],[[["",0]],["fullstat",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["packettype",4]],["bool",0]],[[["",0],["handshake",3]],["bool",0]],[[["",0],["basicstat",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["handshake",3]],["bool",0]],[[["",0],["basicstat",3]],["bool",0]],[[["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["token",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["token",3]]],[[["",0]]],[[]],[[["str",0]]],[[["str",0],["u16",0]]],[[["str",0],["u16",0],["option",4,[["duration",3]]]]],[[["str",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Token"],[3,"BasicStat"],[3,"FullStat"],[3,"QueryClient"],[3,"QueryClient"],[4,"PacketType"],[3,"Handshake"],[3,"BasicStat"],[3,"FullStat"],[3,"QueryClient"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};